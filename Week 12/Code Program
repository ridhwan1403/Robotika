- Implementasi Filter Kalman untuk Estimasi Posisi Robot
import numpy as np
import matplotlib.pyplot as plt

# Parameter
dt = 0.1  # Interval waktu (detik)
n_iter = 100  # Jumlah iterasi (simulasi)

# Matriks Transisi
A = np.array([[1, dt], [0, 1]])  # Model pergerakan robot
H = np.array([[1, 0]])  # Sensor pengukuran posisi (langsung)

# Matriks kovarians
Q = np.array([[1, 0], [0, 1]])  # Noise proses
R = np.array([[1]])  # Noise pengukuran

# Inisialisasi
x = np.array([[0], [0]])  # Posisi awal dan kecepatan
P = np.eye(2)  # Matriks kovarians estimasi awal
true_positions = [0]  # Posisi yang benar
measurements = [np.random.normal(0, 1)]  # Pengukuran posisi dengan noise
estimated_positions = [x[0, 0]]

# Simulasi
for _ in range(1, n_iter):
    # Pergerakan robot (true posisi)
    true_position = true_positions[-1] + 1 + np.random.normal(0, 0.1)  # Kecepatan konstan 1
    true_positions.append(true_position)
    
    # Pengukuran (dengan noise)
    z = true_position + np.random.normal(0, 1)  # Pengukuran posisi dengan noise
    measurements.append(z)
    
    # Prediksi langkah filter Kalman
    x = A @ x
    P = A @ P @ A.T + Q
    
    # Kalman Gain
    K = P @ H.T @ np.linalg.inv(H @ P @ H.T + R)
    
    # Update estimasi
    x = x + K @ (z - H @ x)
    P = (np.eye(2) - K @ H) @ P
    
    estimated_positions.append(x[0, 0])

# Plot
plt.figure(figsize=(10, 6))
plt.plot(true_positions, label="True Position")
plt.plot(measurements, label="Measurements", linestyle=":", alpha=0.7)
plt.plot(estimated_positions, label="Estimated Position (Kalman)", linestyle="--")
plt.legend()
plt.title("Kalman Filter - Estimasi Posisi Robot")
plt.xlabel("Time Step")
plt.ylabel("Position")
plt.show()


- Implementasi Filter Partikel untuk Estimasi Posisi Robot
# Filter Partikel
n_particles = 100  # Jumlah partikel
particles = np.random.normal(0, 1, n_particles)  # Inisialisasi posisi partikel acak
weights = np.ones(n_particles) / n_particles  # Bobot partikel awal

# Simulasi Filter Partikel
estimated_positions_pf = []
for i in range(n_iter):
    # Gerakan robot
    true_position = true_positions[i] + 1 + np.random.normal(0, 0.1)
    true_positions.append(true_position)
    
    # Pengukuran (dengan noise)
    z = true_position + np.random.normal(0, 1)
    measurements.append(z)
    
    # Update posisi partikel dengan model pergerakan
    particles = particles + 1 + np.random.normal(0, 0.1, n_particles)
    
    # Update bobot partikel berdasarkan pengukuran
    weights = np.exp(-0.5 * ((particles - z) ** 2) / 1)  # Likelihood dari pengukuran
    weights /= np.sum(weights)  # Normalisasi bobot
    
    # Resampling
    indices = np.random.choice(range(n_particles), size=n_particles, p=weights)
    particles = particles[indices]
    
    # Estimasi posisi robot
    estimated_positions_pf.append(np.mean(particles))

# Plot
plt.figure(figsize=(10, 6))
plt.plot(true_positions, label="True Position")
plt.plot(measurements, label="Measurements", linestyle=":", alpha=0.7)
plt.plot(estimated_positions_pf, label="Estimated Position (Particle Filter)", linestyle="--")
plt.legend()
plt.title("Particle Filter - Estimasi Posisi Robot")
plt.xlabel("Time Step")
plt.ylabel("Position")
plt.show()


- Implementasi Localization dengan Sensor IMU dan Lidar
# Sensor IMU (untuk estimasi kecepatan dan orientasi)
# IMU data: Acceleration dan Gyroscope (angular velocity)
# Sensor Lidar (untuk pengukuran jarak)
# Misalkan kita punya nilai dummy untuk sensor-sensor ini.
imu_acc = np.random.normal(0, 1, n_iter)  # Acceleration noise
imu_gyro = np.random.normal(0, 1, n_iter)  # Gyroscope noise
lidar_measurements = np.random.normal(0, 1, n_iter)  # Lidar noise

# Estimasi posisi menggunakan IMU + Lidar
imu_positions = np.zeros(n_iter)
lidar_positions = np.zeros(n_iter)
for i in range(1, n_iter):
    imu_positions[i] = imu_positions[i-1] + imu_acc[i-1] * dt  # IMU integration
    lidar_positions[i] = lidar_measurements[i]  # Lidar readings (assumed)

# Plot
plt.figure(figsize=(10, 6))
plt.plot(true_positions, label="True Position")
plt.plot(imu_positions, label="IMU-based Position", linestyle="--")
plt.plot(lidar_positions, label="Lidar-based Position", linestyle=":")
plt.legend()
plt.title("Localization with IMU and Lidar")
plt.xlabel("Time Step")
plt.ylabel("Position")
plt.show()


- Implementasi Simulasi Ekstensi Kalman Filter untuk Navigation
# Extended Kalman Filter (EKF) untuk Navigasi
def ekf_predict(x, P, A, Q):
    # Prediksi langkah
    x = A @ x
    P = A @ P @ A.T + Q
    return x, P

def ekf_update(x, P, z, H, R):
    # Update langkah
    y = z - H @ x  # Inovasi
    S = H @ P @ H.T + R  # Kovarians inovasi
    K = P @ H.T @ np.linalg.inv(S)  # Kalman Gain
    x = x + K @ y
    P = P - K @ H @ P
    return x, P

# Inisialisasi
x = np.array([[0], [0], [0]])  # Posisi, kecepatan, dan orientasi
P = np.eye(3)  # Kovarians estimasi
A = np.eye(3)  # Matriks transisi model
H = np.array([[1, 0, 0]])  # Sensor mengukur posisi langsung
Q = np.eye(3)  # Noise proses
R = np.array([[1]])  # Noise pengukuran

ekf_positions = []
for i in range(n_iter):
    # Prediksi
    x, P = ekf_predict(x, P, A, Q)
    
    # Pengukuran
    z = true_positions[i] + np.random.normal(0, 1)  # Noise pengukuran
    ekf_positions.append(x[0, 0])
    
    # Update
    x, P = ekf_update(x, P, z, H, R)

# Plot
plt.figure(figsize=(10, 6))
plt.plot(true_positions, label="True Position")
plt.plot(ekf_positions, label="EKF Estimated Position", linestyle="--")
plt.legend()
plt.title("Extended Kalman Filter for Navigation")
plt.xlabel("Time Step")
plt.ylabel("Position")
plt.show()


- Implementasi Particle Filter untuk Navigation
# Particle Filter untuk Navigasi
particles = np.random.normal(0, 1, n_particles)
weights = np.ones(n_particles) / n_particles
estimated_positions_pf_nav = []

for i in range(n_iter):
    true_position = true_positions[i] + 1 + np.random.normal(0, 0.1)
    z = true_position + np.random.normal(0, 1)
    
    particles = particles + 1 + np.random.normal(0, 0.1, n_particles)
    weights = np.exp(-0.5 * ((particles - z) ** 2) / 1)
    weights /= np.sum(weights)
    
    indices = np.random.choice(range(n_particles), size=n_particles, p=weights)
    particles = particles[indices]
    
    estimated_positions


- Implementasi Kalman Filter untuk Lokalisasi Robot Menggunakan Robot E-puck
from controller import Robot

TIME_STEP = 32

# Fungsi Kalman Filter
def kalman_filter(z, u, x, P):
    x_pred = x + u
    P_pred = P + 0.1  # Noise proses
    K = P_pred / (P_pred + 1)  # Gain Kalman
    x = x_pred + K * (z - x_pred)  # Pembaruan posisi
    P = (1 - K) * P_pred  # Pembaruan ketidakpastian
    return x, P

# Inisialisasi robot
robot = Robot()

# Motor roda
left_motor = robot.getDevice("left wheel motor")
right_motor = robot.getDevice("right wheel motor")
left_motor.setPosition(float('inf'))  # Mode kecepatan
right_motor.setPosition(float('inf'))  # Mode kecepatan
left_motor.setVelocity(0.0)
right_motor.setVelocity(0.0)

# Encoder roda
left_encoder = robot.getDevice("left wheel sensor")
right_encoder = robot.getDevice("right wheel sensor")
left_encoder.enable(TIME_STEP)
right_encoder.enable(TIME_STEP)

# Sensor jarak IR pada e-puck
ir_sensors = []
sensor_names = ['ps0', 'ps1', 'ps2', 'ps3', 'ps4', 'ps5', 'ps6', 'ps7']
for name in sensor_names:
    sensor = robot.getDevice(name)
    sensor.enable(TIME_STEP)
    ir_sensors.append(sensor)

# Variabel untuk Kalman Filter
x = 0.0  # Posisi awal
P = 1.0  # Ketidakpastian awal

# Loop utama
while robot.step(TIME_STEP) != -1:
    # Ambil nilai encoder
    left_distance = left_encoder.getValue()
    right_distance = right_encoder.getValue()

    # Estimasi pergerakan robot (input u)
    u = (left_distance + right_distance) / 2.0

    # Ambil pengukuran sensor jarak (z)
    z = min([sensor.getValue() for sensor in ir_sensors])  # Gunakan nilai sensor IR terdekat

    # Terapkan Kalman Filter
    x, P = kalman_filter(z, u, x, P)

    print(f"Estimasi Posisi Robot: {x}")
